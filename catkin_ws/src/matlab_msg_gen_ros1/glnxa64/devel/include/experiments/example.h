// Generated by gencpp from file experiments/example.msg
// DO NOT EDIT!


#ifndef EXPERIMENTS_MESSAGE_EXAMPLE_H
#define EXPERIMENTS_MESSAGE_EXAMPLE_H

#include <ros/service_traits.h>


#include <experiments/exampleRequest.h>
#include <experiments/exampleResponse.h>


namespace experiments
{

struct example
{

typedef exampleRequest Request;
typedef exampleResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct example
} // namespace experiments


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::experiments::example > {
  static const char* value()
  {
    return "76b5930aa6e27a49039927b2ca52db98";
  }

  static const char* value(const ::experiments::example&) { return value(); }
};

template<>
struct DataType< ::experiments::example > {
  static const char* value()
  {
    return "experiments/example";
  }

  static const char* value(const ::experiments::example&) { return value(); }
};


// service_traits::MD5Sum< ::experiments::exampleRequest> should match
// service_traits::MD5Sum< ::experiments::example >
template<>
struct MD5Sum< ::experiments::exampleRequest>
{
  static const char* value()
  {
    return MD5Sum< ::experiments::example >::value();
  }
  static const char* value(const ::experiments::exampleRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::experiments::exampleRequest> should match
// service_traits::DataType< ::experiments::example >
template<>
struct DataType< ::experiments::exampleRequest>
{
  static const char* value()
  {
    return DataType< ::experiments::example >::value();
  }
  static const char* value(const ::experiments::exampleRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::experiments::exampleResponse> should match
// service_traits::MD5Sum< ::experiments::example >
template<>
struct MD5Sum< ::experiments::exampleResponse>
{
  static const char* value()
  {
    return MD5Sum< ::experiments::example >::value();
  }
  static const char* value(const ::experiments::exampleResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::experiments::exampleResponse> should match
// service_traits::DataType< ::experiments::example >
template<>
struct DataType< ::experiments::exampleResponse>
{
  static const char* value()
  {
    return DataType< ::experiments::example >::value();
  }
  static const char* value(const ::experiments::exampleResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // EXPERIMENTS_MESSAGE_EXAMPLE_H
