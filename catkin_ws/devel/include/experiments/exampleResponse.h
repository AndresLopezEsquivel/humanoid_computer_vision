// Generated by gencpp from file experiments/exampleResponse.msg
// DO NOT EDIT!


#ifndef EXPERIMENTS_MESSAGE_EXAMPLERESPONSE_H
#define EXPERIMENTS_MESSAGE_EXAMPLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace experiments
{
template <class ContainerAllocator>
struct exampleResponse_
{
  typedef exampleResponse_<ContainerAllocator> Type;

  exampleResponse_()
    : x_undis(0.0)
    , y_undis(0.0)  {
    }
  exampleResponse_(const ContainerAllocator& _alloc)
    : x_undis(0.0)
    , y_undis(0.0)  {
  (void)_alloc;
    }



   typedef double _x_undis_type;
  _x_undis_type x_undis;

   typedef double _y_undis_type;
  _y_undis_type y_undis;





  typedef boost::shared_ptr< ::experiments::exampleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::experiments::exampleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct exampleResponse_

typedef ::experiments::exampleResponse_<std::allocator<void> > exampleResponse;

typedef boost::shared_ptr< ::experiments::exampleResponse > exampleResponsePtr;
typedef boost::shared_ptr< ::experiments::exampleResponse const> exampleResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::experiments::exampleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::experiments::exampleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::experiments::exampleResponse_<ContainerAllocator1> & lhs, const ::experiments::exampleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x_undis == rhs.x_undis &&
    lhs.y_undis == rhs.y_undis;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::experiments::exampleResponse_<ContainerAllocator1> & lhs, const ::experiments::exampleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace experiments

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::experiments::exampleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::experiments::exampleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::experiments::exampleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::experiments::exampleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::experiments::exampleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::experiments::exampleResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::experiments::exampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f77863efde0c711a2ca857d4054f51d";
  }

  static const char* value(const ::experiments::exampleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f77863efde0c711ULL;
  static const uint64_t static_value2 = 0xa2ca857d4054f51dULL;
};

template<class ContainerAllocator>
struct DataType< ::experiments::exampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "experiments/exampleResponse";
  }

  static const char* value(const ::experiments::exampleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::experiments::exampleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# result\n"
"float64 x_undis\n"
"float64 y_undis\n"
;
  }

  static const char* value(const ::experiments::exampleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::experiments::exampleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_undis);
      stream.next(m.y_undis);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct exampleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::experiments::exampleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::experiments::exampleResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_undis: ";
    Printer<double>::stream(s, indent + "  ", v.x_undis);
    s << indent << "y_undis: ";
    Printer<double>::stream(s, indent + "  ", v.y_undis);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXPERIMENTS_MESSAGE_EXAMPLERESPONSE_H
